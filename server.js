// server.js
import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import Candidate from './Candidate.js';
import multer from 'multer';
import nodemailer from 'nodemailer';
import fs from 'fs';
import pdfParse from 'pdf-parse-debugging-disabled'; // using debugging-disabled version
import axios from 'axios'; // For calling Ollama API

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static('uploads'));

// -------------------------
// Global variable and default JD text definition
const defaultJDText = `
We are looking for a Full Stack Developer with expertise in React, Node.js, and MongoDB.
Experience in building REST APIs and agile methodologies is required.
`;

// Global variable to hold the current JD summary generated by the LLM
let currentJDSummary = null;

// -------------------------
// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('✅ MongoDB connected'))
.catch(err => console.error('MongoDB connection error:', err));

// -------------------------
// Multer setup for resume uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({ storage });

// -------------------------
// Helper: Extract text from PDF file
async function extractTextFromPDF(filePath) {
  const dataBuffer = fs.readFileSync(filePath);
  if (!dataBuffer || dataBuffer.length === 0) {
    throw new Error('Resume file is empty');
  }
  const pdfData = await pdfParse(dataBuffer);
  return pdfData.text;
}

// -------------------------
// Ollama helper: Send prompt to local LLM (e.g., Mistral via Ollama)
async function askOllama(prompt) {
  try {
    console.log('🧠 Prompt sent to Ollama:\n', prompt);

    const res = await axios.post('http://localhost:11434/api/generate', {
      model: 'mistral',
      prompt,
      stream: false
    });

    return res.data.response.trim();
  } catch (err) {
    console.error('🛑 Ollama error:', err.message);
    return null;
  }
}

// -------------------------
// JD Summarizer Agent: Summarizes raw JD text using local LLM
async function summarizeJobDescription(rawJDText) {
  const prompt = `
    Extract the following information from the job description:
    - Required Skills (list)
    - Education Requirements
    - Years of Experience Required
    - Key Responsibilities

    Respond in JSON format.

    Job Description: ${rawJDText}
  `;
  const summary = await askOllama(prompt);
  try {
    return JSON.parse(summary);
  } catch (err) {
    console.warn('⚠️ Could not parse LLM response as JSON. Raw response:', summary);
    return summary;
  }
}

// -------------------------
// Candidate Matching Agent using LLM for smart scoring
async function scoreCandidateLLM(resumeText, jdSummary) {
  const prompt = `
    You are an expert technical recruiter.

    Given the following job description summary:
    ${JSON.stringify(jdSummary, null, 2)}

    And the following candidate resume text:
    ${resumeText}

    Score the candidate from 0 to 100 based on:

    - How many required skills are explicitly present in the resume
    - Whether the education matches the requirement
    - Whether the years of experience meet or exceed the requirement
    - Whether key responsibilities or similar projects are reflected in the resume

    Be objective. Don't guess. Respond with only a single number (0 to 100).
  `;

  const response = await askOllama(prompt);
  const score = parseFloat(response);
  return isNaN(score) ? 0 : score;
}

// Fallback: Basic keyword matching if no JD summary available
function calculateKeywordMatchScore(resumeText, jdText) {
  const resumeLower = resumeText.toLowerCase();
  const jdWords = jdText.toLowerCase().split(/\s+/);
  let matches = 0;
  jdWords.forEach(word => {
    if (resumeLower.includes(word)) {
      matches++;
    }
  });
  const score = (matches / jdWords.length) * 100;
  return score > 100 ? 100 : score;
}

// -------------------------
// Nodemailer transporter setup (using your SMTP provider, e.g. Mailgun or Brevo)
const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: process.env.EMAIL_PORT,
  secure: false,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// Interview Scheduling Agent: Sends interview invitation email
async function sendInterviewInvitation(candidateEmail, candidateFirstName) {
  const mailOptions = {
    from: `"TechWizards Recruitment" <${process.env.EMAIL_USER}>`,
    to: candidateEmail,
    subject: 'Interview Invitation from TechWizards',
    text: `Dear ${candidateFirstName},

Congratulations! Based on your profile, we would like to invite you for an interview.
Please reply with your availability.

Best regards,
TechWizards Recruitment Team`
  };
  return transporter.sendMail(mailOptions);
}

// -------------------------
// Route: POST /summarizeJD - JD Summarizer Agent
app.post('/summarizeJD', async (req, res) => {
  try {
    const { rawJDText } = req.body;
    if (!rawJDText) {
      return res.status(400).json({ error: 'rawJDText is required' });
    }
    const summary = await summarizeJobDescription(rawJDText);
    currentJDSummary = summary;
    return res.json({ summary });
  } catch (err) {
    console.error('JD Summarization error:', err);
    return res.status(500).json({ error: 'JD Summarization failed' });
  }
});

// -------------------------
// Route: POST /apply - candidate application with resume upload
app.post('/apply', upload.single('resume'), async (req, res) => {
  try {
    const {
      firstName, lastName, email, phone, address,
      school10, marks10, school12, marks12,
      college, cgpa, graduationYear
    } = req.body;
    const resumePath = req.file ? req.file.path : '';

    // Save candidate data in MongoDB
    const candidate = new Candidate({
      firstName,
      lastName,
      email,
      phone,
      address,
      school10,
      marks10,
      school12,
      marks12,
      college,
      cgpa,
      graduationYear,
      resumePath
    });
    const savedCandidate = await candidate.save();
    console.log('📄 Uploaded file details:', req.file);
    
    // If there's a resume, parse it and calculate match score
    if (resumePath) {
      let resumeText = '';
      if (req.file.mimetype.includes('pdf')) {
        try {
          resumeText = await extractTextFromPDF(resumePath);
        } catch (pdfErr) {
          console.error('❌ PDF parsing failed:', pdfErr.message);
          resumeText = '';
        }
      } else {
        try {
          resumeText = fs.readFileSync(resumePath, 'utf8');
        } catch (txtErr) {
          console.error('❌ TXT parsing failed:', txtErr.message);
          resumeText = '';
        }
      }

      let matchScore = 0;
      if (currentJDSummary) {
        matchScore = await scoreCandidateLLM(resumeText, currentJDSummary);
      } else {
        matchScore = calculateKeywordMatchScore(resumeText, defaultJDText);
      }
      savedCandidate.matchScore = matchScore;
      await savedCandidate.save();
      console.log(`💡 Candidate match score: ${matchScore}`);

      // Auto-send email if match score meets threshold (≥ 40)
      if (matchScore >= 40) {
        console.log('✅ Candidate meets threshold. Sending email...');
        try {
          const emailResult = await sendInterviewInvitation(savedCandidate.email, savedCandidate.firstName);
          console.log('📧 Interview invite sent:', emailResult.response);
        } catch (emailErr) {
          console.error('🚨 Error sending email:', emailErr);
        }
      } else {
        console.log('❌ Candidate did not meet threshold for email invitation.');
      }
    }

    return res.status(201).json(savedCandidate);
  } catch (err) {
    console.error('🚨 Server error:', err);
    return res.status(500).json({ error: 'Server error' });
  }
});

// -------------------------
// Other routes
app.get('/candidates', async (req, res) => {
  try {
    const candidates = await Candidate.find().sort({ appliedDate: -1 });
    return res.json(candidates);
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: 'Server error' });
  }
});

app.get('/candidates/shortlisted', async (req, res) => {
  try {
    const candidates = await Candidate.find({ matchScore: { $gte: 80 } });
    return res.json(candidates);
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: 'Server error' });
  }
});

app.put('/candidates/:id/score', async (req, res) => {
  try {
    const { matchScore } = req.body;
    const updated = await Candidate.findByIdAndUpdate(
      req.params.id,
      { matchScore },
      { new: true }
    );
    return res.json(updated);
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: 'Server error' });
  }
});

app.post('/candidates/:id/send-invite', async (req, res) => {
  try {
    const candidate = await Candidate.findById(req.params.id);
    if (!candidate) {
      return res.status(404).json({ error: 'Candidate not found' });
    }
    const result = await sendInterviewInvitation(candidate.email, candidate.firstName);
    return res.json({ message: 'Invite sent successfully', info: result.response });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: 'Email sending failed' });
  }
});

// -------------------------
// Serve React frontend build (added to fix "Cannot GET /")
import path from 'path';
import { fileURLToPath } from 'url';
const __dirname = path.dirname(fileURLToPath(import.meta.url));

app.use(express.static(path.join(__dirname, 'dist')));
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// -------------------------
// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server listening on port ${PORT}`);
});
